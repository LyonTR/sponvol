# Copyright 2015 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from rubicon import get_model, oauth2, storage
from flask import Blueprint, current_app, redirect, render_template, request, \
    session, url_for, jsonify
#from dicttoxml import dicttoxml
#from google.appengine.api import users
import sys


crud = Blueprint('crud', __name__)


def upload_image_file(file):
    """
    Upload the user-uploaded file to Google Cloud Storage and retrieve its
    publicly-accessible URL.
    """
    if not file:
        return None

    public_url = storage.upload_file(
        file.read(),
        file.filename,
        file.content_type
    )

    current_app.logger.info(
        "Uploaded file %s as %s.", file.filename, public_url)

    return public_url


@crud.route("/")
def index():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    spolunteers, next_page_token = get_model().list(cursor=token)

    return render_template(
        "index.html",
        spolunteers=spolunteers,
        next_page_token=next_page_token)

# [START admin]
@crud.route("/admin")
@oauth2.required
def admin():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    spolunteers, next_page_token = get_model().list(cursor=token)

    return render_template(
        "admin.html",
        spolunteers=spolunteers,
        next_page_token=next_page_token,
        request=request)
# [END admin]

# [START list]
@crud.route("/list")
@oauth2.required
def list():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    spolunteers, next_page_token = get_model().list(cursor=token)

    return render_template(
        "list.html",
        spolunteers=spolunteers,
        next_page_token=next_page_token)
# [END list]

# [START list_mine]
@crud.route("/mine")
@oauth2.required
def list_mine():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    spolunteers, next_page_token = get_model().list_by_user(
        user_id=session['profile']['id'],
        cursor=token)

    return render_template(
        "list.html",
        spolunteers=spolunteers,
        next_page_token=next_page_token)
# [END list_mine]


@crud.route('/<id>', methods=['GET', 'PATCH'])
def view(id):
    spolunteer = get_model().read(id)
    if request.method == 'PATCH':
        data = request.form.to_dict(flat=True)
        for key, value in data.items():
            spolunteer[key]=value
            spolunteer = get_model().update(spolunteer, id)

        return jsonify(spolunteer)
    #    return render_template("view.html", spolunteer=spolunteer)

    #return render_template("view.html", spolunteer=spolunteer)
    return jsonify(spolunteer)


# [START add]
@crud.route('/add', methods=['GET', 'POST'])
def add():
    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        # If an image was uploaded, update the data to point to the new image.
#       image_url = upload_image_file(request.files.get('image'))

#        if image_url:
#            data['imageUrl'] = image_url

        # If the user is logged in, associate their profile with the new spolunteer.
        if 'profile' in session:
            data['createdBy'] = session['profile']['displayName']
            data['createdById'] = session['profile']['id']

        spolunteer = get_model().create(data)
<<<<<<< HEAD
        print('hello there', file=sys.stderr)
        return redirect(url_for('.list', id=spolunteer['id']))
=======

        return redirect(url_for('.index', id=spolunteer['id']))
>>>>>>> ed8b35daa1e493da35b99d8415114b924a38f8be

    return render_template("form.html", action="Add", spolunteer={})
# [END add]

@crud.route('/admin/add')
@oauth2.required
def adminadd():
    data = {}
    if 'profile' in session:
        data['createdBy'] = session['profile']['displayName']
        data['createdById'] = session['profile']['id']

    data['createdAt'] = 'now'
    data['firstname'] = ''
    spolunteer = get_model().create(data)
    print(spolunteer, file=sys.stderr)
    #return render_template("admin.html", action="List", spolunteer={})
    return redirect(url_for('.admin'))

# [START register]
@crud.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        # If an image was uploaded, update the data to point to the new image.
        image_url = upload_image_file(request.files.get('image'))

        if image_url:
            data['imageUrl'] = image_url

        # If the user is logged in, associate their profile with the new spolunteer.
        if 'profile' in session:
            data['createdBy'] = session['profile']['displayName']
            data['createdById'] = session['profile']['id']

        spolunteer = get_model().create(data)
        print(spolunteer, file=sys.stderr)
        return redirect(url_for('.list', id=spolunteer['id']))

    return render_template("register.html", action="Add", spolunteer={})
# [END register]

# [START reception]
@crud.route('/reception', methods=['GET', 'POST'])
@oauth2.required
def reception():
    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        # If an image was uploaded, update the data to point to the new image.
        image_url = upload_image_file(request.files.get('image'))

        if image_url:
            data['imageUrl'] = image_url

        # If the user is logged in, associate their profile with the new spolunteer.
        if 'profile' in session:
            data['createdBy'] = session['profile']['displayName']
            data['createdById'] = session['profile']['id']

        spolunteer = get_model().create(data)

        return redirect(url_for('.list', id=spolunteer['id']))

    return render_template("reception.html", action="Add", spolunteer={})
# [END reception]

# [START interview]
@crud.route('/interview', methods=['GET', 'POST'])
@oauth2.required
def interview():
    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

        # If an image was uploaded, update the data to point to the new image.
        image_url = upload_image_file(request.files.get('image'))

        if image_url:
            data['imageUrl'] = image_url

        # If the user is logged in, associate their profile with the new spolunteer.
        if 'profile' in session:
            data['createdBy'] = session['profile']['displayName']
            data['createdById'] = session['profile']['id']

        spolunteer = get_model().create(data)

        return redirect(url_for('.list', id=spolunteer['id']))

    return render_template("interview.html", action="Add", spolunteer={})
# [END interview]

# [START training]
@crud.route("/training")
@oauth2.required
def training():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    spolunteers, next_page_token = get_model().list(cursor=token)

    return render_template(
        "training.html",
        spolunteers=spolunteers,
        next_page_token=next_page_token)
# [END training]

# [START holding]
@crud.route("/holding")
@oauth2.required
def holding():
    token = request.args.get('page_token', None)
    if token:
        token = token.encode('utf-8')

    spolunteers, next_page_token = get_model().list(cursor=token)

    return render_template(
        "holding.html",
        spolunteers=spolunteers,
        next_page_token=next_page_token)
# [END holding]

@crud.route('/<id>/edit', methods=['GET', 'POST'])
def edit(id):
    spolunteer = get_model().read(id)

    if request.method == 'POST':
        data = request.form.to_dict(flat=True)

#        image_url = upload_image_file(request.files.get('image'))

#        if image_url:
#            data['imageUrl'] = image_url

        spolunteer = get_model().update(data, id)

        return redirect(url_for('.list', id=spolunteer['id']))

    return render_template("form.html", action="Edit", spolunteer=spolunteer)


@crud.route('/<id>/delete')
def delete(id):
    get_model().delete(id)
    #return redirect(url_for(request.path))
    return redirect(url_for('.list'))
